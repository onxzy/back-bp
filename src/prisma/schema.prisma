// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Provider {
  email
  google
}

model User {
  id          String    @id @unique @default(uuid())
  email       String    @unique
  password    String?
  firstName   String
  lastName    String
  isVerified  Boolean   @default(false)

  provider    Provider  @default(email)
  roles       Role[]    @default([USER])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt @default(now())
  loggedInAt  DateTime  @default(now())

  userTokens  User_Tokens[]

  chats       Chat[]
  messages    Message[]

  chatProperties  ChatProperties[]
}

enum TokenType {
  verification
  passwordReset
}

model User_Tokens {
  id          String    @id @unique @default(uuid())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  type        TokenType

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt @default(now())
  expiration  DateTime

  @@unique([userId, type])
}

enum ChatType {
  PRIVATE // Private chat between 2 users
  GROUP   // More than 2 users
}

model Chat {
  id          String            @id @unique @default(uuid())
  type        ChatType          @default(PRIVATE)
  members     User[]
  messages    Message[]

  title       String?

  properties    ChatProperties  @relation(fields: [propertiesId], references: [id], onDelete: Cascade)
  propertiesId  String          @unique

  @@index(fields: [id, type]) 
}

model ChatProperties {
  id              String        @id @unique @default(uuid())
  admins          User[]

  chat            Chat?
}

enum MessageType {
  STANDARD
  EVENT
}

model Message {
  id              Int           @id @default(autoincrement())
  sender          User?         @relation(fields: [senderId], references: [id], onDelete: SetNull)
  senderId        String?
  chat            Chat          @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId          String

  type            MessageType   @default(STANDARD)
  body            Json
  createdAt       DateTime      @default(now())

  replies         Message[]     @relation("Reply")
  replyTo         Message?      @relation("Reply", fields: [replyToId], references: [id], onDelete: SetNull)
  replyToId       Int?      

  @@index(fields: [chatId, createdAt(sort: Desc)]) 
}
